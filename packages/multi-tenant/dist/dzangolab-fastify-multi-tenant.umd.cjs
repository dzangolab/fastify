(function(u,T){typeof exports=="object"&&typeof module<"u"?T(exports,require("@dzangolab/fastify-config"),require("mercurius"),require("fastify-plugin"),require("node:fs"),require("pg"),require("@dzangolab/postgres-migrations"),require("@dzangolab/fastify-slonik"),require("slonik")):typeof define=="function"&&define.amd?define(["exports","@dzangolab/fastify-config","mercurius","fastify-plugin","node:fs","pg","@dzangolab/postgres-migrations","@dzangolab/fastify-slonik","slonik"],T):(u=typeof globalThis<"u"?globalThis:u||self,T(u.DzangolabFastifyMultiTenant={},u.DzangolabFastifyConfig,u.Mercurius,u.FastifyPlugin,u.NodeFs,u.Pg,u.DzangolabPostgresMigrations,u.DzangolabFastifySlonik,u.Slonik))})(this,function(u,T,Z,v,$,A,P,F,s){"use strict";function H(e){const t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const a in e)if(a!=="default"){const r=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(t,a,r.get?r:{enumerable:!0,get:()=>e[a]})}}return t.default=e,Object.freeze(t)}const N=H(A),B=async(e,t)=>{t.config.mercurius.enabled&&(e.tenant=t.tenant)},M=async(e,t)=>{await e.query(`
      CREATE SCHEMA IF NOT EXISTS ${t};
      SET search_path TO ${t};
    `)},E=e=>({database:e.db.databaseName,user:e.db.username,password:e.db.password,host:e.db.host,port:e.db.port}),O=async e=>{const t=new N.Client(e);return await t.connect(),t},_=e=>{const t=e.slonik?.migrations?.path||"migrations";return{migrations:{path:e.multiTenant?.migrations?.path||`${t}/tenants`},reserved:{domains:e.multiTenant?.reserved?.domains||[],slugs:e.multiTenant?.reserved?.slugs||[]},table:{name:e.multiTenant?.table?.name||"tenants",columns:{id:e.multiTenant?.table?.columns?.id||"id",name:e.multiTenant?.table?.columns?.name||"name",slug:e.multiTenant?.table?.columns?.slug||"slug",domain:e.multiTenant?.table?.columns?.domain||"domain"}}}},x=async(e,t,a)=>{if(!$.existsSync(t))return!1;const r="client"in e?e.client:await O(e);return await M(r,a.slug),await P.migrate({client:r},t),"client"in e||await r.end(),!0};var j=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},g={},K={get exports(){return g},set exports(e){g=e}};(function(e){(function(t){var a=function(n,i,d){if(!S(i)||b(i)||V(i)||X(i)||m(i))return i;var p,y=0,R=0;if(h(i))for(p=[],R=i.length;y<R;y++)p.push(a(n,i[y],d));else{p={};for(var z in i)Object.prototype.hasOwnProperty.call(i,z)&&(p[n(z,d)]=a(n,i[z],d))}return p},r=function(n,i){i=i||{};var d=i.separator||"_",p=i.split||/(?=[A-Z])/;return n.split(p).join(d)},o=function(n){return Y(n)?n:(n=n.replace(/[\-_\s]+(.)?/g,function(i,d){return d?d.toUpperCase():""}),n.substr(0,1).toLowerCase()+n.substr(1))},f=function(n){var i=o(n);return i.substr(0,1).toUpperCase()+i.substr(1)},l=function(n,i){return r(n,i).toLowerCase()},c=Object.prototype.toString,m=function(n){return typeof n=="function"},S=function(n){return n===Object(n)},h=function(n){return c.call(n)=="[object Array]"},b=function(n){return c.call(n)=="[object Date]"},V=function(n){return c.call(n)=="[object RegExp]"},X=function(n){return c.call(n)=="[object Boolean]"},Y=function(n){return n=n-0,n===n},q=function(n,i){var d=i&&"process"in i?i.process:i;return typeof d!="function"?n:function(p,y){return d(p,n,y)}},D={camelize:o,decamelize:l,pascalize:f,depascalize:l,camelizeKeys:function(n,i){return a(q(o,i),n)},decamelizeKeys:function(n,i){return a(q(l,i),n,i)},pascalizeKeys:function(n,i){return a(q(f,i),n)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}};e.exports?e.exports=D:t.humps=D})(j)})(K);class L extends F.DefaultSqlFactory{fieldMappings=new Map(Object.entries({domain:"domain",id:"id",name:"name",slug:"slug"}));constructor(t){super(t),this.init()}getAllWithAliasesSql=t=>{const a=[];for(const r of t)a.push(s.sql`${this.getAliasedField(r)}`);return s.sql`
      SELECT ${s.sql.join(a,s.sql`, `)}
      FROM ${this.getTableFragment()}
      ORDER BY ${s.sql.identifier([g.decamelize(this.getMappedField("id"))])} ASC;
    `};getCreateSql=t=>{const a=[],r=[];for(const o in t){const f=o,l=t[f];a.push(s.sql.identifier([g.decamelize(this.getMappedField(f))])),r.push(l)}return s.sql`
      INSERT INTO ${this.getTableFragment()}
        (${s.sql.join(a,s.sql`, `)})
      VALUES (${s.sql.join(r,s.sql`, `)})
      RETURNING *;
    `};getFindByHostnameSql=(t,a)=>s.sql`
      SELECT *
      FROM ${this.getTableFragment()}
      WHERE ${s.sql.identifier([g.decamelize(this.getMappedField("domain"))])} = ${t}
      OR (
        ${s.sql.identifier([g.decamelize(this.getMappedField("slug"))])}
        || '.' ||
        ${a}
      ) = ${t};
    `;getAliasedField=t=>{const a=this.getMappedField(t);return a===t?s.sql.identifier([t]):s.sql.join([s.sql.identifier([a]),s.sql.identifier([t])],s.sql` AS `)};getMappedField=t=>this.fieldMappings.has(t)?this.fieldMappings.get(t):t;init(){const t=this.config.multiTenant?.table?.columns;if(t)for(const a in t){const r=a;this.fieldMappings.set(r,t[r])}}}class w extends F.BaseService{all=async t=>{const a=this.factory.getAllWithAliasesSql(t);return await this.database.connect(o=>o.any(a))};findByHostname=async t=>{const a=this.factory.getFindByHostnameSql(t,this.config.multiTenant.rootDomain);return await this.database.connect(async o=>o.maybeOne(a))};get factory(){if(!this.table)throw new Error("Service table is not defined");return this._factory||(this._factory=new L(this)),this._factory}get table(){return this.config.multiTenant?.table?.name||"tenants"}postCreate=async t=>{const a=_(this.config);return await x(E(this.config.slonik),a.migrations.path,t),t}}const I=v(async(e,t,a)=>{try{const{config:r,slonik:o}=e,f=E(r.slonik),c=_(r).migrations.path;if($.existsSync(c)){const S=await new w(r,o).all(["name","slug"]),h=await O(f);for(const b of S)e.log.info(`Running migrations for tenant ${b.name}`),await x({client:h},c,b);await M(h,"public"),await h.end()}else e.log.warn(`Tenant migrations path '${c}' does not exists.`)}catch(r){throw e.log.error("ðŸ”´ multi-tenant: Failed to run tenant migrations"),r}a()}),U=async(e,t,a)=>{const r=e.multiTenant?.reserved?.slugs,o=e.multiTenant?.reserved?.domains;if(o&&o.includes(a)||r&&r.some(c=>`${c}.${e.multiTenant.rootDomain}`===a))return null;const l=await new w(e,t).findByHostname(a);if(l)return l;throw new Error("Tenant not found")},W=e=>{let t;try{if(t=new URL(e).host,!t)throw new Error("Host is empty")}catch{t=e}return t},G=v(async(e,t,a)=>{e.addHook("preHandler",async(r,o)=>{const f=r.headers.referer||r.headers.origin||r.hostname,{config:l,slonik:c}=r;try{const m=await U(l,c,W(f));m&&(r.tenant=m)}catch(m){return e.log.error(m),o.send({error:{message:"Tenant not found"}})}}),a()}),C=v(async(e,t,a)=>{e.log.info("Registering fastify-multi-tenant plugin"),await e.register(I),await e.register(G),a()});C.updateContext=B,u.TenantService=w,u.default=C,Object.defineProperties(u,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
