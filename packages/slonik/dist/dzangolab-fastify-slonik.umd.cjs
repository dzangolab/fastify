(function(c,u){typeof exports=="object"&&typeof module<"u"?u(exports,require("fastify-plugin"),require("slonik"),require("humps"),require("@dzangolab/postgres-migrations"),require("zod")):typeof define=="function"&&define.amd?define(["exports","fastify-plugin","slonik","humps","@dzangolab/postgres-migrations","zod"],u):(c=typeof globalThis<"u"?globalThis:c||self,u(c.DzangolabFastifySlonik={},c.FastifyPlugin,c.Slonik,c.Humps,c.DzangolabPostgresMigrations,c.Zod))})(this,function(c,u,t,q,$,f){"use strict";const v={transformRow:(r,e,a,n)=>q.camelizeKeys(a)},D={transformRow:(r,e,a,n)=>{const{resultParser:s}=r;if(!s)return a;const i=s.safeParse(a);if(!i.success)throw new t.SchemaValidationError(e,a,i.error.issues);return i.data}},b=r=>{const e={captureStackTrace:!1,connectionRetryLimit:3,connectionTimeout:5e3,idleInTransactionSessionTimeout:6e4,idleTimeout:5e3,interceptors:[],maximumPoolSize:10,queryRetryLimit:5,statementTimeout:6e4,transactionRetryLimit:5,...r};return e.interceptors=[v,D,...r?.interceptors??[]],e},L=async r=>{const e=r.slonik,a={database:e.db.databaseName,user:e.db.username,password:e.db.password,host:e.db.host,port:e.db.port,ensureDatabaseExists:!0,defaultDatabase:"postgres"},n="migrations";await $.migrate(a,e?.migrations?.path||n)},S=async(r,e)=>{const a=await t.createPool(r,b(e));return{connect:a.connect.bind(a),pool:a,query:a.query.bind(a)}},p=async(r,e)=>{const{connectionString:a,clientConfiguration:n}=e;let s;try{s=await S(a,n),await s.pool.connect(async()=>{r.log.info("âœ… Connected to Postgres DB")})}catch(i){throw r.log.error("ðŸ”´ Error happened while connecting to Postgres DB"),new Error(i)}!r.hasDecorator("slonik")&&!r.hasDecorator("sql")&&(r.decorate("slonik",s),r.decorate("sql",t.sql)),!r.hasRequestDecorator("slonik")&&!r.hasRequestDecorator("sql")&&(r.decorateRequest("slonik",null),r.decorateRequest("sql",null),r.addHook("onRequest",async i=>{i.slonik=s,i.sql=t.sql}))},I=u(p,{fastify:"4.x",name:"fastify-slonik"});u(p,{fastify:"4.x",name:"fastify-slonik"});const w=u(async(r,e,a)=>{const n=r.config.slonik;r.log.info("Registering fastify-slonik plugin"),r.register(I,{connectionString:t.stringifyDsn(n.db),clientConfiguration:b(n?.clientConfiguration)}),r.log.info("Running database migrations"),await L(r.config),a()}),C=(r,e)=>{const a=r.key,n=r.operator||"eq",s=r.not||!1;let i=r.value;const l=t.sql.identifier([...e.names,a]);let o;switch(n){case"ct":case"sw":case"ew":{i={ct:`%${i}%`,ew:`%${i}`,sw:`${i}%`}[n],o=s?t.sql.fragment`NOT ILIKE`:t.sql.fragment`ILIKE`;break}case"eq":default:{o=s?t.sql.fragment`!=`:t.sql.fragment`=`;break}case"gt":{o=s?t.sql.fragment`<`:t.sql.fragment`>`;break}case"gte":{o=s?t.sql.fragment`<`:t.sql.fragment`>=`;break}case"lte":{o=s?t.sql.fragment`>`:t.sql.fragment`<=`;break}case"lt":{o=s?t.sql.fragment`>`:t.sql.fragment`<`;break}case"in":{o=s?t.sql.fragment`NOT IN`:t.sql.fragment`IN`,i=t.sql.fragment`(${t.sql.join(i.split(","),t.sql.fragment`, `)})`;break}case"bt":{o=s?t.sql.fragment`NOT BETWEEN`:t.sql.fragment`BETWEEN`,i=t.sql.fragment`${t.sql.join(i.split(","),t.sql.fragment` AND `)}`;break}}return t.sql.fragment`${l} ${o} ${i}`},N=(r,e,a=!1)=>{const n=[],s=[];let i;const l=(o,g,y=!1)=>{if(o.AND)for(const m of o.AND)l(m,g);else if(o.OR)for(const m of o.OR)l(m,g,!0);else{const m=C(o,g);y?s.push(m):n.push(m)}};return l(r,e,a),n.length>0&&s.length>0?i=t.sql.join([t.sql.fragment`(${t.sql.join(n,t.sql.fragment` AND `)})`,t.sql.fragment`(${t.sql.join(s,t.sql.fragment` OR `)})`],t.sql.fragment`${r.AND?t.sql.fragment` AND `:t.sql.fragment` OR `}`):n.length>0?i=t.sql.join(n,t.sql.fragment` AND `):s.length>0&&(i=t.sql.join(s,t.sql.fragment` OR `)),i?t.sql.fragment`WHERE ${i}`:t.sql.fragment``},h=(r,e)=>r?N(r,e):t.sql.fragment``,T=(r,e)=>{let a=t.sql.fragment`LIMIT ${r}`;return e&&(a=t.sql.fragment`LIMIT ${r} OFFSET ${e}`),a},E=(r,e)=>{if(e&&e.length>0){const a=[];for(const n of e){const s=n.direction==="ASC"?t.sql.fragment`ASC`:t.sql.fragment`DESC`;a.push(t.sql.fragment`${t.sql.identifier([...r.names,n.key])} ${s}`)}return t.sql.fragment`ORDER BY ${t.sql.join(a,t.sql.fragment`,`)}`}return t.sql.fragment`ORDER BY id ASC`},F=(r,e)=>t.sql.fragment`${d(r,e)}`,d=(r,e)=>t.sql.identifier(e?[e,r]:[r]),O=r=>t.sql.fragment`WHERE id = ${r}`;class R{_service;constructor(e){this._service=e}getAllSql=e=>{const a=[],n={};for(const i of e)a.push(t.sql.identifier([q.decamelize(i)])),n[i]=!0;const s=this.validationSchema._def.typeName==="ZodObject"?this.validationSchema.pick(n):f.z.any();return t.sql.type(s)`
      SELECT ${t.sql.join(a,t.sql.fragment`, `)}
      FROM ${this.getTableFragment()}
      ORDER BY id ASC;
    `};getCreateSql=e=>{const a=[],n=[];for(const s in e){const i=s,l=e[i];a.push(t.sql.identifier([q.decamelize(i)])),n.push(l)}return t.sql.type(this.validationSchema)`
      INSERT INTO ${this.getTableFragment()}
        (${t.sql.join(a,t.sql.fragment`, `)})
      VALUES (${t.sql.join(n,t.sql.fragment`, `)})
      RETURNING *;
    `};getDeleteSql=e=>t.sql.type(this.validationSchema)`
      DELETE FROM ${this.getTableFragment()}
      WHERE id = ${e}
      RETURNING *;
    `;getFindByIdSql=e=>t.sql.type(this.validationSchema)`
      SELECT *
      FROM ${this.getTableFragment()}
      WHERE id = ${e};
    `;getListSql=(e,a,n,s)=>{const i=d(this.table,this.schema);return t.sql.type(this.validationSchema)`
      SELECT *
      FROM ${this.getTableFragment()}
      ${h(n,i)}
      ${E(i,s)}
      ${T(e,a)};
    `};getTableFragment=()=>F(this.table,this.schema);getUpdateSql=(e,a)=>{const n=[];for(const s in a){const i=a[s];n.push(t.sql.fragment`${t.sql.identifier([q.decamelize(s)])} = ${i}`)}return t.sql.type(this.validationSchema)`
      UPDATE ${this.getTableFragment()}
      SET ${t.sql.join(n,t.sql.fragment`, `)}
      WHERE id = ${e}
      RETURNING *;
    `};getCountSql=e=>{const a=d(this.table,this.schema),n=f.z.object({count:f.z.number()});return t.sql.type(n)`
      SELECT COUNT(*)
      FROM ${this.getTableFragment()}
      ${h(e,a)};
    `};get config(){return this.service.config}get database(){return this.service.database}get service(){return this._service}get schema(){return this.service.schema}get table(){return this.service.table}get validationSchema(){return this.service.validationSchema}}class _{static TABLE=void 0;static LIMIT_DEFAULT=20;static LIMIT_MAX=50;_config;_database;_factory;_schema="public";_validationSchema=f.z.any();constructor(e,a,n){this._config=e,this._database=a,n&&(this._schema=n)}all=async e=>{const a=this.factory.getAllSql(e);return await this.database.connect(s=>s.any(a))};create=async e=>{const a=this.factory.getCreateSql(e),n=await this.database.connect(async s=>s.query(a).then(i=>i.rows[0]));return n?this.postCreate(n):void 0};delete=async e=>{const a=this.factory.getDeleteSql(e);return await this.database.connect(s=>s.one(a))};findById=async e=>{const a=this.factory.getFindByIdSql(e);return await this.database.connect(s=>s.maybeOne(a))};getLimitDefault=()=>this.config.slonik?.pagination?.defaultLimit||this.constructor.LIMIT_DEFAULT;getLimitMax=()=>this.config.slonik?.pagination?.maxLimit||this.constructor.LIMIT_MAX;list=async(e,a,n,s)=>{const i=this.factory.getListSql(Math.min(e??this.getLimitDefault(),this.getLimitMax()),a,n,s),[l,o,g]=await Promise.all([this.count(),this.count(n),this.database.connect(y=>y.any(i))]);return{totalCount:l,filteredCount:o,data:g}};paginatedList=async(e,a,n,s)=>this.list(e,a,n,s);count=async e=>{const a=this.factory.getCountSql(e);return(await this.database.connect(s=>s.any(a)))[0].count};update=async(e,a)=>{const n=this.factory.getUpdateSql(e,a);return await this.database.connect(s=>s.query(n).then(i=>i.rows[0]))};get config(){return this._config}get database(){return this._database}get factory(){if(!this.table)throw new Error("Service table is not defined");return this._factory||(this._factory=new R(this)),this.factory}get schema(){return this._schema||"public"}get table(){return this.constructor.TABLE}get validationSchema(){return this._validationSchema||f.z.any()}postCreate=async e=>e}c.BaseService=_,c.DefaultSqlFactory=R,c.createDatabase=S,c.createFilterFragment=h,c.createLimitFragment=T,c.createSortFragment=E,c.createTableFragment=F,c.createTableIdentifier=d,c.createWhereIdFragment=O,c.default=w,Object.defineProperties(c,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
