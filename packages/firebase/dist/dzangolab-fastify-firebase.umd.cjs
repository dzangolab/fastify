(function(o,h){typeof exports=="object"&&typeof module<"u"?h(exports,require("fastify-plugin"),require("firebase-admin"),require("slonik"),require("@dzangolab/fastify-slonik"),require("mercurius"),require("@dzangolab/fastify-graphql")):typeof define=="function"&&define.amd?define(["exports","fastify-plugin","firebase-admin","slonik","@dzangolab/fastify-slonik","mercurius","@dzangolab/fastify-graphql"],h):(o=typeof globalThis<"u"?globalThis:o||self,h(o.DzangolabFastifyFirebase={},o.FastifyPlugin,o.FirebaseAdmin,o.Slonik,o.DzangolabFastifySlonik,o.mercurius,o.DzangolabFastifyGraphql))})(this,function(o,h,E,p,T,d,w){"use strict";const D=(e,t)=>{if(!(E.apps.length>0)){if(e.firebase?.enabled!==!1&&!e.firebase.credentials){t.log.error("Firebase credentials are missing");return}try{E.initializeApp({credential:E.credential.cert({projectId:e.firebase.credentials?.projectId,privateKey:e.firebase.credentials?.privateKey.replace(/\\n/g,`
`),clientEmail:e.firebase.credentials?.clientEmail})})}catch(n){t.log.error("Failed to initialize firebase"),t.log.error(n)}}},b=async e=>{await E.messaging().sendEachForMulticast(e)},R="/send-notification",k="/user-device",F="/user-device",I="user_devices",_=e=>{const t=e.firebase.table?.userDevices?.name||I;return p.sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${p.sql.identifier([t])} (
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id VARCHAR(255) NOT NULL,
        device_token VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX IF NOT EXISTS idx_user_id_device_token ON ${p.sql.identifier([t])} (user_id, device_token);
  `},O=async(e,t)=>{await e.connect(async n=>{await n.query(_(t))})},P=h(async(e,t,n)=>{const{config:r,slonik:i,log:s}=e;r.firebase.enabled===!1?s.info("fastify-firebase plugin is not enabled"):(s.info("Registering fastify-firebase plugin"),await O(i,r),D(r,e)),n()});class C extends T.DefaultSqlFactory{getFindByUserIdSql=t=>p.sql.type(this.validationSchema)`
      SELECT * 
      FROM ${this.getTableFragment()}
      WHERE user_id = ${t};
    `;getDeleteExistingTokenSql=t=>p.sql.type(this.validationSchema)`
      DELETE
      FROM ${this.getTableFragment()}
      WHERE device_token = ${t}
      RETURNING *;
    `}class f extends T.BaseService{get table(){return I}get factory(){if(!this.table)throw new Error("Service table is not defined");return this._factory||(this._factory=new C(this)),this._factory}create=async t=>{const{deviceToken:n}=t;await this.removeByDeviceToken(n);const r=this.factory.getCreateSql(t);return await this.database.connect(s=>s.maybeOne(r))};getByUserId=async t=>{const n=this.factory.getFindByUserIdSql(t);return await this.database.connect(i=>i.any(n))};removeByDeviceToken=async t=>{const n=this.factory.getDeleteExistingTokenSql(t);return await this.database.connect(i=>i.maybeOne(n))}}const M={sendNotification:async(e,t)=>{if(!e.session?.getUserId())throw e.log.error("user id is not defined"),new Error("Oops, Please login to continue");const{body:r,title:i,data:s,userId:u}=e.body;if(!u)throw e.log.error("receiver id is not defined"),new Error("Oops, Please provide a receiver id");const l=await new f(e.config,e.slonik,e.dbSchema).getByUserId(u);if(!l||l.length===0)throw e.log.error("no device found for the receiver"),new Error("Unable to find device for the receiver");const c=l.map(g=>g.deviceToken),a={android:{priority:"high",notification:{sound:"default"}},apns:{payload:{aps:{sound:"default"}}},tokens:c,notification:{title:i,body:r},data:{...s,title:i,body:r}};await b(a),t.send({message:"Notification sent successfully"})}},y=e=>async()=>{if(e.config.firebase.enabled===!1)throw new Error("Firebase is not enabled")},A=async(e,t,n)=>{const r=e.config.firebase.handlers?.userDevice,i=e.config.firebase.notification;i?.test?.enabled&&e.post(i.test.path||R,{preHandler:[e.verifySession(),y(e)]},r?.addUserDevice||M.sendNotification),n()},$={Mutation:{sendNotification:async(e,t,n)=>{const{app:r,config:i,dbSchema:s,database:u,user:v}=n;if(v?.id||new d.ErrorWithProps("Could not get user id",{},403),i.firebase.enabled===!1)return new d.ErrorWithProps("Firebase is not enabled",{},404);try{const{userId:c,title:a,body:g,data:m}=t.data;if(!c)return new d.ErrorWithProps("Receiver id is required",{},400);const S=await new f(i,u,s).getByUserId(c);if(!S||S.length===0)return new d.ErrorWithProps("Receiver device not found",{},404);const q={tokens:S.map(Q=>Q.deviceToken),notification:{title:a,body:g},data:m};return await b(q),{message:"Notification sent successfully"}}catch(c){r.log.error(c);const a=new d.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}}},Query:{}},B={Mutation:{addUserDevice:async(e,t,n)=>{const{app:r,config:i,dbSchema:s,database:u,user:v}=n,l=v?.id;if(i.firebase.enabled===!1)return new d.ErrorWithProps("Firebase is not enabled",{},404);if(!l)return new d.ErrorWithProps("Could not get user id",{},403);try{const{deviceToken:c}=t.data;return await new f(i,u,s).create({userId:l,deviceToken:c})}catch(c){r.log.error(c);const a=new d.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}},removeUserDevice:async(e,t,n)=>{const{app:r,config:i,dbSchema:s,database:u,user:v}=n,l=v?.id;if(i.firebase.enabled===!1)return new d.ErrorWithProps("Firebase is not enabled",{},404);if(!l)return new d.ErrorWithProps("Could not get user id",{},403);try{const{deviceToken:c}=t.data,a=new f(i,u,s),g=await a.getByUserId(l);return!g||g.length===0?new d.ErrorWithProps("No devices found for user",{},403):g.find(N=>N.deviceToken===c)?await a.removeByDeviceToken(c):new d.ErrorWithProps("Device requested to delete not owned by user",{},403)}catch(c){r.log.error(c);const a=new d.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}}},Query:{}},U={addUserDevice:async(e,t)=>{const n=e.session?.getUserId();if(!n)throw e.log.error("could not get user id from session"),new Error("Oops, Something went wrong");const{deviceToken:r}=e.body;if(!r)throw e.log.error("device token is not defined"),new Error("Oops, Something went wrong");const i=new f(e.config,e.slonik,e.dbSchema);t.send(await i.create({userId:n,deviceToken:r}))},removeUserDevice:async(e,t)=>{const n=e.session?.getUserId();if(!n)throw e.log.error("could not get user id from session"),new Error("Oops, Something went wrong");const{deviceToken:r}=e.body;if(!r)throw e.log.error("device token is not defined"),new Error("Oops, Something went wrong");const i=new f(e.config,e.slonik,e.dbSchema),s=await i.getByUserId(n);if(!s||s.length===0)throw e.log.error("No devices found for user"),new Error("Oops, Something went wrong");if(!s.find(v=>v.deviceToken===r))throw e.log.error("device requested to delete not owned by user"),new Error("Oops, Something went wrong");t.send(await i.removeByDeviceToken(r))}},L=async(e,t,n)=>{const r=e.config.firebase.handlers?.userDevice;e.post(k,{preHandler:[e.verifySession(),y(e)]},r?.addUserDevice||U.addUserDevice),e.delete(F,{preHandler:[e.verifySession(),y(e)]},r?.removeUserDevice||U.removeUserDevice),n()},W=w.gql`
  type SendNotificationResponse {
    message: String!
  }

  input SendNotificationInput {
    userId: String!
    title: String!
    body: String!
  }

  type Mutation {
    sendNotification(data: SendNotificationInput): SendNotificationResponse
      @auth
  }
`,z=w.gql`
  type UserDevice {
    id: Int!
    userId: String!
    deviceToken: String!
    createdAt: Float!
    updatedAt: Float!
  }

  type UserDevices {
    data: [UserDevice]!
  }

  input UserDeviceCreateInput {
    deviceToken: String!
  }

  input UserDeviceUpdateInput {
    deviceToken: String!
  }

  input UserDeviceRemoveInput {
    deviceToken: String!
  }

  type Mutation {
    addUserDevice(data: UserDeviceCreateInput): UserDevice @auth
    removeUserDevice(data: UserDeviceRemoveInput): UserDevice @auth
  }
`,H=w.mergeTypeDefs([w.baseSchema,W,z]);o.UserDeviceService=f,o.default=P,o.firebaseSchema=H,o.initializeFirebase=D,o.notificationResolver=$,o.notificationRoutes=A,o.sendPushNotification=b,o.userDeviceResolver=B,o.userDeviceRoutes=L,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
