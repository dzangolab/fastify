(function(o,E){typeof exports=="object"&&typeof module<"u"?E(exports,require("@dzangolab/fastify-mercurius"),require("fastify-plugin"),require("firebase-admin"),require("slonik"),require("@dzangolab/fastify-slonik"),require("mercurius")):typeof define=="function"&&define.amd?define(["exports","@dzangolab/fastify-mercurius","fastify-plugin","firebase-admin","slonik","@dzangolab/fastify-slonik","mercurius"],E):(o=typeof globalThis<"u"?globalThis:o||self,E(o.DzangolabFastifyFirebase={},null,o.FastifyPlugin,o.FirebaseAdmin,o.Slonik,o.DzangolabFastifySlonik,o.mercirius))})(this,function(o,E,N,w,h,T,d){"use strict";const D=(e,r)=>{if(!(w.apps.length>0)){if(e.firebase?.enabled!==!1&&!e.firebase.credentials){r.log.error("Firebase credentials are missing");return}try{w.initializeApp({credential:w.credential.cert({projectId:e.firebase.credentials?.projectId,privateKey:e.firebase.credentials?.privateKey.replace(/\\n/g,`
`),clientEmail:e.firebase.credentials?.clientEmail})})}catch(n){r.log.error("Failed to initialize firebase"),r.log.error(n)}}},b=async e=>{await w.messaging().sendEachForMulticast(e)},R="/send-notification",_="/user-device",k="/user-device",S="user_devices",F=e=>{const r=e.firebase.table?.userDevices?.name||S;return h.sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${h.sql.identifier([r])} (
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id VARCHAR(255) NOT NULL,
        device_token VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX IF NOT EXISTS idx_user_id_device_token ON ${h.sql.identifier([r])} (user_id, device_token);
  `},O=async(e,r)=>{await e.connect(async n=>{await n.query(F(r))})},P=N(async(e,r,n)=>{const{config:i,slonik:t,log:s}=e;i.firebase.enabled===!1?s.info("fastify-firebase plugin is not enabled"):(s.info("Registering fastify-firebase plugin"),await O(t,i),D(i,e)),n()});class C extends T.DefaultSqlFactory{getFindByUserIdSql=r=>h.sql.type(this.validationSchema)`
      SELECT * 
      FROM ${this.getTableFragment()}
      WHERE user_id = ${r};
    `;getDeleteExistingTokenSql=r=>h.sql.type(this.validationSchema)`
      DELETE
      FROM ${this.getTableFragment()}
      WHERE device_token = ${r}
      RETURNING *;
    `}class v extends T.BaseService{get table(){return S}get factory(){if(!this.table)throw new Error("Service table is not defined");return this._factory||(this._factory=new C(this)),this._factory}create=async r=>{const{deviceToken:n}=r;await this.removeByDeviceToken(n);const i=this.factory.getCreateSql(r);return await this.database.connect(s=>s.maybeOne(i))};getByUserId=async r=>{const n=this.factory.getFindByUserIdSql(r);return await this.database.connect(t=>t.any(n))};removeByDeviceToken=async r=>{const n=this.factory.getDeleteExistingTokenSql(r);return await this.database.connect(t=>t.maybeOne(n))}}const M={sendNotification:async(e,r)=>{if(!e.session?.getUserId())throw e.log.error("user id is not defined"),new Error("Oops, Please login to continue");const{body:i,title:t,data:s,userId:u}=e.body;if(!u)throw e.log.error("receiver id is not defined"),new Error("Oops, Please provide a receiver id");const l=await new v(e.config,e.slonik,e.dbSchema).getByUserId(u);if(!l||l.length===0)throw e.log.error("no device found for the receiver"),new Error("Unable to find device for the receiver");const c=l.map(g=>g.deviceToken),a={android:{priority:"high",notification:{sound:"default"}},apns:{payload:{aps:{sound:"default"}}},tokens:c,notification:{title:t,body:i},data:{...s,title:t,body:i}};await b(a),r.send({message:"Notification sent successfully"})}},y=e=>async()=>{if(e.config.firebase.enabled===!1)throw new Error("Firebase is not enabled")},A=async(e,r,n)=>{const i=e.config.firebase.handlers?.userDevice,t=e.config.firebase.notification;t?.test?.enabled&&e.post(t.test.path||R,{preHandler:[e.verifySession(),y(e)]},i?.addUserDevice||M.sendNotification),n()},$={Mutation:{sendNotification:async(e,r,n)=>{const{app:i,config:t,dbSchema:s,database:u,user:f}=n;if(f?.id||new d.ErrorWithProps("Could not get user id",{},403),t.firebase.enabled===!1)return new d.ErrorWithProps("Firebase is not enabled",{},404);try{const{userId:c,title:a,body:g,data:m}=r.data;if(!c)return new d.ErrorWithProps("Receiver id is required",{},400);const p=await new v(t,u,s).getByUserId(c);if(!p||p.length===0)return new d.ErrorWithProps("Receiver device not found",{},404);const W={tokens:p.map(z=>z.deviceToken),notification:{title:a,body:g},data:m};return await b(W),{message:"Notification sent successfully"}}catch(c){i.log.error(c);const a=new d.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}}},Query:{}},B={Mutation:{addUserDevice:async(e,r,n)=>{const{app:i,config:t,dbSchema:s,database:u,user:f}=n,l=f?.id;if(t.firebase.enabled===!1)return new d.ErrorWithProps("Firebase is not enabled",{},404);if(!l)return new d.ErrorWithProps("Could not get user id",{},403);try{const{deviceToken:c}=r.data;return await new v(t,u,s).create({userId:l,deviceToken:c})}catch(c){i.log.error(c);const a=new d.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}},removeUserDevice:async(e,r,n)=>{const{app:i,config:t,dbSchema:s,database:u,user:f}=n,l=f?.id;if(t.firebase.enabled===!1)return new d.ErrorWithProps("Firebase is not enabled",{},404);if(!l)return new d.ErrorWithProps("Could not get user id",{},403);try{const{deviceToken:c}=r.data,a=new v(t,u,s),g=await a.getByUserId(l);return!g||g.length===0?new d.ErrorWithProps("No devices found for user",{},403):g.find(U=>U.deviceToken===c)?await a.removeByDeviceToken(c):new d.ErrorWithProps("Device requested to delete not owned by user",{},403)}catch(c){i.log.error(c);const a=new d.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}}},Query:{}},I={addUserDevice:async(e,r)=>{const n=e.session?.getUserId();if(!n)throw e.log.error("could not get user id from session"),new Error("Oops, Something went wrong");const{deviceToken:i}=e.body;if(!i)throw e.log.error("device token is not defined"),new Error("Oops, Something went wrong");const t=new v(e.config,e.slonik,e.dbSchema);r.send(await t.create({userId:n,deviceToken:i}))},removeUserDevice:async(e,r)=>{const n=e.session?.getUserId();if(!n)throw e.log.error("could not get user id from session"),new Error("Oops, Something went wrong");const{deviceToken:i}=e.body;if(!i)throw e.log.error("device token is not defined"),new Error("Oops, Something went wrong");const t=new v(e.config,e.slonik,e.dbSchema),s=await t.getByUserId(n);if(!s||s.length===0)throw e.log.error("No devices found for user"),new Error("Oops, Something went wrong");if(!s.find(f=>f.deviceToken===i))throw e.log.error("device requested to delete not owned by user"),new Error("Oops, Something went wrong");r.send(await t.removeByDeviceToken(i))}},L=async(e,r,n)=>{const i=e.config.firebase.handlers?.userDevice;e.post(_,{preHandler:[e.verifySession(),y(e)]},i?.addUserDevice||I.addUserDevice),e.delete(k,{preHandler:[e.verifySession(),y(e)]},i?.removeUserDevice||I.removeUserDevice),n()};o.UserDeviceService=v,o.default=P,o.initializeFirebase=D,o.notificationResolver=$,o.notificationRoutes=A,o.sendPushNotification=b,o.userDeviceResolver=B,o.userDeviceRoutes=L,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
