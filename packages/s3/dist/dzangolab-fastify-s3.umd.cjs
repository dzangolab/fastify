(function(a,c){typeof exports=="object"&&typeof module<"u"?c(exports,require("@dzangolab/fastify-slonik"),require("uuid"),require("busboy"),require("@aws-sdk/client-s3"),require("@aws-sdk/lib-storage"),require("@aws-sdk/s3-request-presigner"),require("@fastify/multipart"),require("fastify-plugin"),require("slonik"),require("graphql-upload-minimal")):typeof define=="function"&&define.amd?define(["exports","@dzangolab/fastify-slonik","uuid","busboy","@aws-sdk/client-s3","@aws-sdk/lib-storage","@aws-sdk/s3-request-presigner","@fastify/multipart","fastify-plugin","slonik","graphql-upload-minimal"],c):(a=typeof globalThis<"u"?globalThis:a||self,c(a.DzangolabFastifyS3={},a.DzangolabFastifySlonik,a.uuid,a.Busboy,a.AWSClientS3,a.libStorage,a.AWSS3RequestPresigner,a.FastifyMultipart,a.FastifyPlugin,a.Slonik,a.graphqlUploadMinimal))})(this,function(a,c,T,C,h,_,E,S,m,g,k){"use strict";const y="files",I="optionsBucket",A="fileFieldsBucket",N="add-suffix",R="error",F=async i=>new Promise((e,n)=>{const t=[];i.on("data",s=>t.push(s)),i.once("end",()=>e(Buffer.concat(t))),i.once("error",n)}),x=i=>i.replace(/\.[^.]+$/,""),O=i=>{const e=i.lastIndexOf(".");return e===-1?"":i.slice(e+1)},P=(i,e,n)=>n===I&&i?i:n===A&&e||e&&!i?e:i&&!e?i:e===i?e:e||i,D=(i,e,n)=>{const t=i.Contents,s=new RegExp(`${e}-(\\d+)\\.${n}$`),r=t?.reduce((l,f)=>{const u=f.Key?.match(s);if(u){const d=Number.parseInt(u[1]);return Math.max(l,d)}return l},0),o=r?r+1:1;return`${e}-${o}.${n}`},U=(i,e,n)=>{const t=C({headers:i.headers}),s={},r={};t.on("field",(o,l)=>{s[o]=l}),t.on("file",(o,l,f)=>{const u=[];l.on("data",d=>{u.push(d)}),l.on("end",()=>{const d=Buffer.concat(u);r[o]||(r[o]=[]),r[o].push({...f,mimetype:f.mimeType,data:d})})}),t.on("finish",()=>{i.body={...s,...r},n(null,i.body)}),t.on("error",o=>{console.log(o)}),e.pipe(t)};class w{_bucket=void 0;_config;_storageClient;constructor(e){this._config=e,this._storageClient=this.init()}get config(){return this._config}get bucket(){return this._bucket}set bucket(e){this._bucket=e}async delete(e){const n=new h.DeleteObjectCommand({Bucket:this.bucket,Key:e});return await this._storageClient.send(n)}async generatePresignedUrl(e,n,t=3600){const s=new h.GetObjectCommand({Bucket:this.bucket,Key:e,ResponseContentDisposition:`attachment; filename="${n}"`});return await E.getSignedUrl(this._storageClient,s,{expiresIn:t})}async get(e){const n=new h.GetObjectCommand({Bucket:this.bucket,Key:e}),t=await this._storageClient.send(n),s=t.Body,r=await F(s);return{ContentType:t.ContentType,Body:r}}async upload(e,n,t){return await new _.Upload({client:this._storageClient,params:{Bucket:this.bucket,Key:n,Body:e,ContentType:t}}).done()}async isFileExists(e){try{const n=new h.HeadObjectCommand({Bucket:this.bucket,Key:e});return!!await this._storageClient.send(n)}catch(n){if(n.name==="NotFound")return!1;throw n}}async getObjects(e){return await this._storageClient.send(new h.ListObjectsCommand({Bucket:this.bucket,Prefix:e}))}init(){return new h.S3Client({credentials:{accessKeyId:this.config.s3.accessKey,secretAccessKey:this.config.s3.secretKey},endpoint:this.config.s3.endPoint,forcePathStyle:this.config.s3.forcePathStyle,region:this.config.s3.region})}}class L extends c.BaseService{_filename=void 0;_fileExtension=void 0;_path=void 0;_s3Client;get table(){return this.config.s3?.table?.name||y}get filename(){return this._filename&&!this._filename.endsWith(this.fileExtension)?`${this._filename}.${this.fileExtension}`:this._filename||`${T.v4()}.${this.fileExtension}`}set filename(e){this._filename=e}get fileExtension(){return this._fileExtension}set fileExtension(e){this._fileExtension=e}get path(){return this._path}set path(e){this._path=e}get key(){let e="";return this.path&&(e=this.path.endsWith("/")?this.path:this.path+"/"),`${e}${this.filename}`}get s3Client(){return this._s3Client??(this._s3Client=new w(this.config))}deleteFile=async(e,n)=>{const t=await this.findById(e);if(!t)throw new Error(`File with ID ${e} not found.`);this.s3Client.bucket=n?.bucket||t.bucket;const s=await this.delete(e);return s&&await this.s3Client.delete(t.key),s};download=async(e,n)=>{const t=await this.findById(e);if(!t)throw new Error(`File with ID ${e} not found.`);this.s3Client.bucket=n?.bucket||t.bucket;const s=await this.s3Client.get(t.key);return{...t,mimeType:s?.ContentType,fileStream:s.Body}};presignedUrl=async(e,n)=>{const t=await this.findById(e);if(!t)throw new Error(`File with ID ${e} not found.`);this.s3Client.bucket=n.bucket||t.bucket;const s=await this.s3Client.generatePresignedUrl(t.key,t.originalFileName,n.signedUrlExpiresInSecond);return{...t,url:s}};upload=async e=>{const{fileContent:n,fileFields:t}=e.file,{filename:s,mimetype:r,data:o}=n,{path:l="",bucket:f="",bucketChoice:u,filenameResolutionStrategy:d}=e.options||{},K=O(s);this.fileExtension=K,this.path=l,this.s3Client.bucket=P(f,t?.bucket,u)||"";let p=this.key;const v=await this.s3Client.isFileExists(p),z=d||this.config.s3.filenameResolutionStrategy;if(v)switch(z){case R:throw new Error("File already exists in S3.");case N:{const b=x(this.filename),W=await this.s3Client.getObjects(b),H=D(W,b,this.fileExtension);this.filename=H,p=this.key;break}}if(!await this.s3Client.upload(o,p,r))return;const V={...t&&{...t},...t?.uploadedAt&&{uploadedAt:c.formatDate(new Date(t.uploadedAt))},...t?.lastDownloadedAt&&{lastDownloadedAt:c.formatDate(new Date(t.lastDownloadedAt))},originalFileName:s,key:p};return this.create(V)}}const M=i=>{const e=i.s3?.table?.name||y;return g.sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${g.sql.identifier([e])} (
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        original_file_name VARCHAR(255) NOT NULL,
        bucket VARCHAR(255),
        description TEXT,
        key VARCHAR(255) NOT NULL,
        uploaded_by_id VARCHAR(255) NOT NULL,
        uploaded_at TIMESTAMP NOT NULL,
        download_count INT DEFAULT 0,
        last_downloaded_at TIMESTAMP,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
`},$=async(i,e)=>{await i.connect(async n=>{await n.query(M(e))})},q=m((i,e,n)=>{i.addHook("preValidation",async(t,s)=>{t.graphqlFileUploadMultipart&&(t.body=await k.processRequest(t.raw,s.raw,e))}),n()},{fastify:">= 4.x",name:"mercurius-upload"}),B=m(async(i,e,n)=>{i.log.info("Registering fastify-s3 plugin");const{config:t,slonik:s}=i;await $(s,t),t.rest.enabled&&await i.register(S,{addToBody:!0,sharedSchemaId:"fileSchema",limits:{fileSize:t.s3.fileSizeLimitInBytes||Number.POSITIVE_INFINITY}}),t.graphql?.enabled&&await i.register(q,{maxFileSize:t.s3.fileSizeLimitInBytes||Number.POSITIVE_INFINITY}),n()}),j=m((i,e,n)=>{i.hasContentTypeParser("multipart")||i.addContentTypeParser("multipart",(t,s,r)=>{t.config.graphql?.enabled&&t.routerPath.startsWith(t.config.graphql.path)?(t.graphqlFileUploadMultipart=!0,r(null)):U(t,s,r)}),n()});a.FileService=L,a.S3Client=w,a.default=B,a.multipartParserPlugin=j,Object.defineProperties(a,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
