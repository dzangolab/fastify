(function(a,h){typeof exports=="object"&&typeof module<"u"?h(exports,require("@dzangolab/fastify-mercurius"),require("@dzangolab/fastify-slonik"),require("uuid"),require("busboy"),require("@aws-sdk/client-s3"),require("@aws-sdk/lib-storage"),require("@aws-sdk/s3-request-presigner"),require("@fastify/multipart"),require("fastify-plugin"),require("slonik"),require("graphql-upload-minimal")):typeof define=="function"&&define.amd?define(["exports","@dzangolab/fastify-mercurius","@dzangolab/fastify-slonik","uuid","busboy","@aws-sdk/client-s3","@aws-sdk/lib-storage","@aws-sdk/s3-request-presigner","@fastify/multipart","fastify-plugin","slonik","graphql-upload-minimal"],h):(a=typeof globalThis<"u"?globalThis:a||self,h(a.DzangolabFastifyS3={},null,a.DzangolabFastifySlonik,a.uuid,a.Busboy,a.AWSClientS3,a.libStorage,a.AWSS3RequestPresigner,a.FastifyMultipart,a.FastifyPlugin,a.Slonik,a.graphqlUploadMinimal))})(this,function(a,h,p,C,_,d,E,S,k,g,y,I){"use strict";const b="files",A="optionsBucket",N="fileFieldsBucket",R="add-suffix",x="error",F=async n=>new Promise((e,i)=>{const t=[];n.on("data",s=>t.push(s)),n.once("end",()=>e(Buffer.concat(t))),n.once("error",i)}),O=n=>n.replace(/\.[^.]+$/,""),P=n=>{const e=n.lastIndexOf(".");return e===-1?"":n.slice(e+1)},D=(n,e,i)=>i===A&&n?n:i===N&&e||e&&!n?e:n&&!e?n:e===n?e:e||n,U=(n,e,i)=>{const t=n.Contents,s=new RegExp(`${e}-(\\d+)\\.${i}$`),r=t?.reduce((u,f)=>{const c=f.Key?.match(s);if(c){const l=Number.parseInt(c[1]);return Math.max(u,l)}return u},0),o=r?r+1:1;return`${e}-${o}.${i}`},M=(n,e,i)=>{const t=_({headers:n.headers}),s={},r={};t.on("field",(o,u)=>{s[o]=u}),t.on("file",(o,u,f)=>{const c=[];u.on("data",l=>{c.push(l)}),u.on("end",()=>{const l=Buffer.concat(c);r[o]||(r[o]=[]),r[o].push({...f,mimetype:f.mimeType,data:l})})}),t.on("finish",()=>{n.body={...s,...r},i(null,n.body)}),t.on("error",o=>{console.log(o)}),e.pipe(t)};class w{_bucket=void 0;_config;_storageClient;constructor(e){this._config=e,this._storageClient=this.init()}get config(){return this._config}get bucket(){return this._bucket}set bucket(e){this._bucket=e}async delete(e){const i=new d.DeleteObjectCommand({Bucket:this.bucket,Key:e});return await this._storageClient.send(i)}async generatePresignedUrl(e,i,t=3600){const s=new d.GetObjectCommand({Bucket:this.bucket,Key:e,ResponseContentDisposition:`attachment; filename="${i}"`});return await S.getSignedUrl(this._storageClient,s,{expiresIn:t})}async get(e){const i=new d.GetObjectCommand({Bucket:this.bucket,Key:e}),t=await this._storageClient.send(i),s=t.Body,r=await F(s);return{ContentType:t.ContentType,Body:r}}async upload(e,i,t){return await new E.Upload({client:this._storageClient,params:{Bucket:this.bucket,Key:i,Body:e,ContentType:t}}).done()}async isFileExists(e){try{const i=new d.HeadObjectCommand({Bucket:this.bucket,Key:e});return!!await this._storageClient.send(i)}catch(i){if(i.name==="NotFound")return!1;throw i}}async getObjects(e){return await this._storageClient.send(new d.ListObjectsCommand({Bucket:this.bucket,Prefix:e}))}init(){return new d.S3Client({credentials:{accessKeyId:this.config.s3.accessKey,secretAccessKey:this.config.s3.secretKey},endpoint:this.config.s3.endPoint,forcePathStyle:this.config.s3.forcePathStyle,region:this.config.s3.region})}}class L extends p.BaseService{_filename=void 0;_fileExtension=void 0;_path=void 0;_s3Client;get table(){return this.config.s3?.table?.name||b}get filename(){return this._filename&&!this._filename.endsWith(this.fileExtension)?`${this._filename}.${this.fileExtension}`:this._filename||`${C.v4()}.${this.fileExtension}`}set filename(e){this._filename=e}get fileExtension(){return this._fileExtension}set fileExtension(e){this._fileExtension=e}get path(){return this._path}set path(e){this._path=e}get key(){let e="";return this.path&&(e=this.path.endsWith("/")?this.path:this.path+"/"),`${e}${this.filename}`}get s3Client(){return this._s3Client??(this._s3Client=new w(this.config))}deleteFile=async(e,i)=>{const t=await this.findById(e);if(!t)throw new Error(`File with ID ${e} not found.`);this.s3Client.bucket=i?.bucket||t.bucket;const s=await this.delete(e);return s&&await this.s3Client.delete(t.key),s};download=async(e,i)=>{const t=await this.findById(e);if(!t)throw new Error(`File with ID ${e} not found.`);this.s3Client.bucket=i?.bucket||t.bucket;const s=await this.s3Client.get(t.key);return{...t,mimeType:s?.ContentType,fileStream:s.Body}};presignedUrl=async(e,i)=>{const t=await this.findById(e);if(!t)throw new Error(`File with ID ${e} not found.`);this.s3Client.bucket=i.bucket||t.bucket;const s=await this.s3Client.generatePresignedUrl(t.key,t.originalFileName,i.signedUrlExpiresInSecond);return{...t,url:s}};upload=async e=>{const{fileContent:i,fileFields:t}=e.file,{filename:s,mimetype:r,data:o}=i,{path:u="",bucket:f="",bucketChoice:c,filenameResolutionStrategy:l}=e.options||{},v=P(s);this.fileExtension=v,this.path=u,this.s3Client.bucket=D(f,t?.bucket,c)||"";let m=this.key;const z=await this.s3Client.isFileExists(m),V=l||this.config.s3.filenameResolutionStrategy;if(z)switch(V){case x:throw new Error("File already exists in S3.");case R:{const T=O(this.filename),H=await this.s3Client.getObjects(T),Y=U(H,T,this.fileExtension);this.filename=Y,m=this.key;break}}if(!await this.s3Client.upload(o,m,r))return;const W={...t&&{...t},...t?.uploadedAt&&{uploadedAt:p.formatDate(new Date(t.uploadedAt))},...t?.lastDownloadedAt&&{lastDownloadedAt:p.formatDate(new Date(t.lastDownloadedAt))},originalFileName:s,key:m};return this.create(W)}}const $=n=>{const e=n.s3?.table?.name||b;return y.sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${y.sql.identifier([e])} (
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        original_file_name VARCHAR(255) NOT NULL,
        bucket VARCHAR(255),
        description TEXT,
        key VARCHAR(255) NOT NULL,
        uploaded_by_id VARCHAR(255) NOT NULL,
        uploaded_at TIMESTAMP NOT NULL,
        download_count INT DEFAULT 0,
        last_downloaded_at TIMESTAMP,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
`},B=async(n,e)=>{await n.connect(async i=>{await i.query($(e))})},q=g((n,e,i)=>{n.addHook("preValidation",async(t,s)=>{t.mercuriusUploadMultipart&&(t.body=await I.processRequest(t.raw,s.raw,e))}),i()},{fastify:">= 4.x",name:"mercurius-upload"}),j=g(async(n,e,i)=>{n.log.info("Registering fastify-s3 plugin");const{config:t,slonik:s}=n;await B(s,t),t.rest.enabled&&await n.register(k,{addToBody:!0,sharedSchemaId:"fileSchema",limits:{fileSize:t.s3.fileSizeLimitInBytes||Number.POSITIVE_INFINITY}}),t.mercurius.enabled&&await n.register(q,{maxFileSize:t.s3.fileSizeLimitInBytes||Number.POSITIVE_INFINITY}),i()}),K=g((n,e,i)=>{n.hasContentTypeParser("multipart")||n.addContentTypeParser("multipart",(t,s,r)=>{t.config.mercurius.enabled&&t.routerPath.startsWith(t.config.mercurius.path)?(t.mercuriusUploadMultipart=!0,r(null)):M(t,s,r)}),i()});a.FileService=L,a.S3Client=w,a.default=j,a.multipartParserPlugin=K,Object.defineProperties(a,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
