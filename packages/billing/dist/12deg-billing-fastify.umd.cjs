(function(o,s){typeof exports=="object"&&typeof module<"u"?s(exports,require("@dzangolab/fastify-slonik"),require("graphql-tag"),require("fastify-plugin"),require("slonik")):typeof define=="function"&&define.amd?define(["exports","@dzangolab/fastify-slonik","graphql-tag","fastify-plugin","slonik"],s):(o=typeof globalThis<"u"?globalThis:o||self,s(o["12degBillingFastify"]={},o.DzangolabFastifySlonik,o.graphqlTag,o.FastifyPlugin,o.Slonik))})(this,function(o,s,p,u,c){"use strict";const l="organizations";class r extends s.BaseService{static TABLE=l}const d={createOrganization:async(n,i)=>{const a=new r(n.config,n.slonik),t=n.body,e=await a.create(t);i.send(e)},deleteOrganization:async(n,i)=>{const a=new r(n.config,n.slonik),{id:t}=n.params,e=await a.delete(t);i.send(e)},listOrganization:async(n,i)=>{const a=new r(n.config,n.slonik),{limit:t,offset:e,filters:g,sort:z}=n.query,w=await a.list(t,e,g?JSON.parse(g):void 0,z?JSON.parse(z):void 0);i.send(w)},organization:async(n,i)=>{const a=new r(n.config,n.slonik),{id:t}=n.params,e=await a.findById(t);i.send(e)},updateOrganization:async(n,i)=>{const a=new r(n.config,n.slonik),{id:t}=n.params,e=n.body,g=await a.update(t,e);i.send(g)}},O=async(n,i,a)=>{const t=n.config.organization?.handlers?.organization;n.get("/organizations",{preHandler:n.verifySession()},t?.list||d.listOrganization),n.get("/organizations/:id(^\\d+)",{preHandler:n.verifySession()},t?.organization||d.organization),n.delete("/organizations/:id(^\\d+)",{preHandler:n.verifySession()},t?.delete||d.deleteOrganization),n.post("/organizations",{preHandler:n.verifySession()},t?.create||d.createOrganization),n.put("/organizations/:id(^\\d+)",{preHandler:n.verifySession()},t?.update||d.updateOrganization),a()},f={Mutation:{createOrganization:async(n,i,a)=>{const t=new r(a.config,a.database);try{if(!a.user)throw new Error("UserId not found in session.");return await t.create(i.data)}catch(e){console.log(e)}},deleteOrganization:async(n,i,a)=>{const t=new r(a.config,a.database);try{return await t.delete(i.id)}catch(e){console.log(e)}},updateOrganization:async(n,i,a)=>{const t=new r(a.config,a.database);try{return await t.update(i.id,i.data)}catch(e){console.log(e)}}},Query:{organization:async(n,i,a)=>await new r(a.config,a.database).findById(i.id),organizations:async(n,i,a)=>await new r(a.config,a.database).list(i.limit,i.offset,i.filters?JSON.parse(JSON.stringify(i.filters)):void 0,i.sort?JSON.parse(JSON.stringify(i.sort)):void 0)}},y=p.gql`
  input OrganizationCreateInput {
    billingAddress: String
    name: String
    schema: String
    taxId: String
    tenant: Boolean
    typeId: Int
  }

  input OrganizationUpdateInput {
    billingAddress: String
    name: String
    taxId: String
    typeId: Int
  }

  type Mutation {
    createOrganization(data: OrganizationCreateInput!): Organization @auth
    deleteOrganization(id: Int!): Organization @auth
    updateOrganization(id: Int!, data: OrganizationUpdateInput!): Organization
      @auth
  }

  type Organizations {
    totalCount: Int
    filteredCount: Int
    data: [Organization]!
  }

  type Organization {
    id: String!
    billingAddress: String!
    name: String!
    schema: String
    taxId: String
    tenant: Boolean
    typeId: Int!
  }

  type Query {
    organizations(
      limit: Int
      offset: Int
      filters: Filters
      sort: [SortInput]
    ): Organizations! @auth
    organization(id: Int!): Organization @auth
  }
`,S=()=>c.sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${c.sql.identifier([l])} (
      "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "billing_address" VARCHAR(255),
      "name" VARCHAR(255),
      "schema" VARCHAR(63) DEFAULT 'public',
      "tax_id" VARCHAR(255),
      "tenant" BOOLEAN,
      "type_id" INTEGER
    );
  `,I=async n=>{await n.connect(async i=>{await i.query(S())})},v=u(async(n,i,a)=>{const{log:t,slonik:e}=n;t.info("Registering billing-fastify plugin"),await I(e),a()});o.default=v,o.organizationResolver=f,o.organizationRoutes=O,o.organizationSchema=y,o.organizationService=r,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
